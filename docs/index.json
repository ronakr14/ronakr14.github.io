[{"content":"","description":"Life journey so far","image":null,"permalink":"https://ronakr14.github.io/gallery/","title":"Journey so far ..."},{"content":"\u003cp\u003eUsing Git in Documentation, Design, and Content Management\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eWhen most people hear “Git,” they think of developers and coding. However, Git isn’t just for programmers; it’s a powerful tool for anyone working in teams, including writers, designers, and marketing professionals. Whether you’re managing documentation, collaborating on design assets, or keeping track of content, Git offers an efficient way to handle version control and collaboration.\u003c/p\u003e\n\u003cp\u003eIn this blog, we’ll explore how Git can benefit non-coders by focusing on three key areas: documentation, design, and content management.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"1-using-git-for-documentation-projects\"\u003e1. Using Git for Documentation Projects\u003c/h3\u003e\n\u003cp\u003eFor documentation writers, version control is essential, especially in collaborative projects. Git allows multiple authors to work on the same document simultaneously, ensuring that changes are tracked and conflicts are minimized. Here’s how writers can use Git effectively:\u003c/p\u003e\n\u003ch4 id=\"collaborating-with-git\"\u003eCollaborating with Git\u003c/h4\u003e\n\u003cp\u003eWriters working on documentation often deal with frequent updates and edits. Git allows you to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTrack changes: Every update to a document is saved as a separate version, making it easy to see what changed, when, and who made the changes.\u003c/li\u003e\n\u003cli\u003eWork simultaneously: Multiple team members can work on different sections of the documentation without interfering with each other’s work.\u003c/li\u003e\n\u003cli\u003eRevert to earlier versions: If an issue arises or a mistake is made, it’s easy to roll back to a previous version of the document.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"steps-to-get-started\"\u003eSteps to Get Started:\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eSet up a Git repository: You can use a platform like GitHub or GitLab to host your project.\u003c/li\u003e\n\u003cli\u003eCreate branches: Writers can create separate branches for different sections or chapters, allowing them to work independently.\u003c/li\u003e\n\u003cli\u003eCommit changes regularly: Each time you make significant edits, commit your changes to ensure they are versioned.\u003c/li\u003e\n\u003cli\u003eUse Pull Requests (PRs): When you’re ready to merge your work into the main document, submit a PR for review, ensuring no conflicting changes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"2-version-control-for-design-assets\"\u003e2. Version Control for Design Assets\u003c/h3\u003e\n\u003cp\u003eFor designers, keeping track of different versions of design files is crucial. Whether you’re working on logos, UI assets, or marketing materials, Git offers a way to manage these files effectively.\u003c/p\u003e\n\u003ch4 id=\"why-designers-should-use-git\"\u003eWhy Designers Should Use Git\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eFile Versioning: Just like with text files, Git can track changes in binary files such as PSDs, PNGs, or SVGs. This is particularly useful when you’re refining designs or working in iterative stages.\u003c/li\u003e\n\u003cli\u003eCollaboration: Multiple designers can work on different elements of a project simultaneously. By creating branches, they can experiment without affecting the main design.\u003c/li\u003e\n\u003cli\u003eConflict Resolution: If two designers make changes to the same asset, Git provides mechanisms to handle these conflicts, making sure nothing is lost.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"steps-to-use-git-for-design\"\u003eSteps to Use Git for Design:\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eCreate a repository for design assets.\u003c/li\u003e\n\u003cli\u003eAdd the binary files (design files) to the repository.\u003c/li\u003e\n\u003cli\u003eCommit design iterations regularly. This helps in tracking versions and understanding the design evolution.\u003c/li\u003e\n\u003cli\u003eUse descriptive commit messages: This ensures the purpose of each design iteration is clear.\u003c/li\u003e\n\u003cli\u003eGit might not be able to show diffs for binary files, but keeping design iterations in Git makes it easier to revert to earlier versions or collaborate with other team members.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"3-git-for-marketing-and-content-teams\"\u003e3. Git for Marketing and Content Teams\u003c/h3\u003e\n\u003cp\u003eContent teams, including marketers, copywriters, and social media managers, also benefit from version control. Here’s how:\u003c/p\u003e\n\u003ch4 id=\"content-collaboration\"\u003eContent Collaboration:\u003c/h4\u003e\n\u003cp\u003eMarketing teams often work with various forms of content—blog posts, landing page copy, email templates, etc. Git allows multiple people to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWork on content pieces simultaneously without overwriting each other’s work.\u003c/li\u003e\n\u003cli\u003eTrack edits and revisions for approval workflows.\u003c/li\u003e\n\u003cli\u003eMaintain consistency by providing a single source of truth for the content.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"examples-of-marketing-use-cases\"\u003eExamples of Marketing Use Cases:\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eEmail Campaigns: By using Git, marketers can version control email templates, keeping track of changes over different campaigns.\u003c/li\u003e\n\u003cli\u003eContent Management: For blog posts, landing pages, or product descriptions, Git allows content to evolve while maintaining a clear history.\u003c/li\u003e\n\u003cli\u003eDigital Asset Management: Marketing teams can use Git to organize and manage logos, banners, and other branding assets, ensuring consistency across platforms.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h3\u003e\n\u003cp\u003eGit is a powerful tool for managing collaboration and version control, and its use cases extend far beyond coding. Writers, designers, and marketing teams can all benefit from its ability to track changes, manage content, and foster efficient teamwork. As remote work continues to grow, having a solid version control system like Git can streamline processes and ensure transparency across teams.\u003c/p\u003e\n\u003cp\u003eWhether you’re managing a documentation project, tracking design iterations, or organizing content, Git offers a reliable and scalable way to keep your projects on track.\u003c/p\u003e\n","description":"","image":"/images/blogs/git_noncoders/git_noncoders.webp","permalink":"https://ronakr14.github.io/blogs/git_noncoders/","title":"Git for Non-Coders"},{"content":"\u003ch2 id=\"introduction-to-python-metaclasses\"\u003eIntroduction to Python Metaclasses\u003c/h2\u003e\n\u003cp\u003eMetaclasses are an advanced and somewhat lesser-known feature in Python, but they hold immense power. In essence, metaclasses are the classes of classes. They define how classes behave, just as classes define how instances behave. While regular classes in Python are blueprints for creating objects, metaclasses are blueprints for creating classes.\u003c/p\u003e\n\u003ch2 id=\"why-use-metaclasses\"\u003eWhy Use Metaclasses?\u003c/h2\u003e\n\u003cp\u003eYou might ask: Why do we need a class for a class? Metaclasses allow for customization of class creation. By using them, you can:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAutomatically register classes.\u003c/li\u003e\n\u003cli\u003eEnforce certain rules (e.g., ensuring class attributes or methods are present).\u003c/li\u003e\n\u003cli\u003eModify class behavior dynamically during its creation.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"how-classes-are-created-in-python\"\u003eHow Classes are Created in Python\u003c/h2\u003e\n\u003cp\u003eIn Python, everything is an object, even classes themselves. When you create a class, Python executes the type() function, which in turn creates the class. Here’s a simplified breakdown:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyClass\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Equivalent to\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMyClass \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e type(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;MyClass\u0026#39;\u003c/span\u003e, (), {})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe built-in type() function in Python is itself a metaclass. By default, all classes in Python are instances of type.\u003c/p\u003e\n\u003ch2 id=\"defining-a-metaclass\"\u003eDefining a Metaclass\u003c/h2\u003e\n\u003cp\u003eTo define a custom metaclass, you create a class that inherits from type. Let’s start with a basic example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Defining a simple metaclass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyMeta\u003c/span\u003e(type):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __new__(cls, name, bases, dct):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Creating class \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ename\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e super()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e__new__(cls, name, bases, dct)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Using the metaclass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyClass\u003c/span\u003e(metaclass\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eMyMeta):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHow It Works:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe metaclass, MyMeta, overrides the \u003cstrong\u003enew\u003c/strong\u003e method, which is responsible for creating the class.\u003c/li\u003e\n\u003cli\u003eWhen you define MyClass, Python calls MyMeta.\u003cstrong\u003enew\u003c/strong\u003e, printing the message and creating the class.\nOutput:\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"creating-class-myclass\"\u003eCreating class MyClass\u003c/h2\u003e\n\u003cp\u003ePractical Example: Enforcing Class Structure\nA common use case for metaclasses is enforcing the presence of certain attributes or methods in a class. Here’s an example where the metaclass ensures that every subclass defines a speak method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRequireSpeakMethod\u003c/span\u003e(type):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __new__(cls, name, bases, dct):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;speak\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e dct:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eraise\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTypeError\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Class \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ename\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e must define \u0026#39;speak\u0026#39; method.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e super()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e__new__(cls, name, bases, dct)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Correct class definition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDog\u003c/span\u003e(metaclass\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eRequireSpeakMethod):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003espeak\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woof!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# This will raise an error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCat\u003c/span\u003e(metaclass\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eRequireSpeakMethod):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epass\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# Missing the speak method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you attempt to define the Cat class without a speak method, Python raises an error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eTypeError\u003c/span\u003e: Class Cat must define \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;speak\u0026#39;\u003c/span\u003e method\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"customizing-class-creation\"\u003eCustomizing Class Creation\u003c/h2\u003e\n\u003cp\u003eWith metaclasses, you can modify the class’s attributes or methods at the moment of its creation. For instance, you can automatically register every class that is created by a metaclass:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRegistryMeta\u003c/span\u003e(type):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  registry \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __new__(cls, name, bases, dct):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      new_class \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e super()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e__new__(cls, name, bases, dct)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      cls\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eregistry\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(new_class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e new_class\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Any class with this metaclass will be automatically registered\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAnimal\u003c/span\u003e(metaclass\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eRegistryMeta):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDog\u003c/span\u003e(Animal):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCat\u003c/span\u003e(Animal):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(RegistryMeta\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eregistry)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003e__main__\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eAnimal\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;\u003c/span\u003e__main__\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDog\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;\u003c/span\u003e__main__\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eCat\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026gt;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, the RegistryMeta metaclass keeps a record of all classes created using it, enabling easy tracking.\u003c/p\u003e\n\u003ch2 id=\"metaclasses-vs-class-decorators\"\u003eMetaclasses vs. Class Decorators\u003c/h2\u003e\n\u003cp\u003eYou might be wondering: Why use metaclasses when class decorators can also modify class behavior? The answer lies in control. Metaclasses provide more granular and powerful control over the class creation process than decorators, including handling multiple inheritance and dynamically altering class behavior.\u003c/p\u003e\n\u003ch2 id=\"when-should-you-use-metaclasses\"\u003eWhen Should You Use Metaclasses?\u003c/h2\u003e\n\u003cp\u003eWhile metaclasses are powerful, they can make your code harder to read and maintain. They should be used sparingly and only when absolutely necessary. Some appropriate use cases include:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnforcing certain design patterns.\u003c/li\u003e\n\u003cli\u003eAutomatically registering or modifying classes.\u003c/li\u003e\n\u003cli\u003eDebugging or logging the creation of classes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eMetaclasses are a deep and powerful feature in Python that allow you to modify and control how classes behave. While they may not be commonly needed, they can be extremely useful in situations that require dynamic class behavior or strict rules for class structure. However, always weigh the complexity they introduce against the benefits they provide.\u003c/p\u003e\n","description":"","image":"/images/blogs/python_metaclass/1.webp","permalink":"https://ronakr14.github.io/blogs/python_metaclass/","title":"Introduction to Python Metaclasses"},{"content":"\u003cp\u003eIn this article, I will provide a detailed guide on how to upload a Kaggle dataset directly to Google Colab. This process simplifies data access, allowing users to seamlessly integrate Kaggle datasets into their Colab notebooks for analysis, machine learning, or data engineering tasks.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"prerequisite\"\u003ePrerequisite\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eColab\u003c/li\u003e\n\u003cli\u003eKaggle Dataset\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"steps\"\u003eSteps:\u003c/h3\u003e\n\u003ch4 id=\"1-choose-dataset\"\u003e1. Choose Dataset\u003c/h4\u003e\n\u003cp\u003ePick the dataset you want to import into CoLab. I will be using Reviews for Hotels Worldwide (Booking.com)\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/1.png\" alt=\"Image Description\" width = 900 height=200\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch4 id=\"2-api-token\"\u003e2. API Token\u003c/h4\u003e\n\u003cp\u003eTo download a dataset, kaggle services require authentication. You must now download an API token.\u003c/p\u003e\n\u003cp\u003eYou may quickly generate this token from your Kaggle account’s profile page. Easily access your Kaggle profile by clicking here.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eselect account –\u0026gt; find API section –\u0026gt; create new API token\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/2.png\" alt=\"Image Description\" width = 300 height=200 /\u003e\r\n\u003c/div\u003e\r\n\u003cbr\u003e\r\n\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/3.png\" alt=\"Image Description\" width = 900 height=100 /\u003e\r\n\u003c/div\u003e\r\n\u003cbr\u003e\r\n\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/4.png\" alt=\"Image Description\" width = 900 height=100 /\u003e\r\n\u003c/div\u003e\r\n\u003cbr\u003e\r\nA file named as kaggle.json will be downloaded on your local machine.\r\n\u003chr\u003e\n\u003ch4 id=\"3-colab-notebook\"\u003e3. Colab Notebook\u003c/h4\u003e\n\u003cp\u003eSet up your colab notebook and upload kaggle.json which was downloaded in step 2 to it.\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/5.png\" alt=\"Image Description\" width = 300 height=200 /\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eNow install Kaggle Library, make .kaggle directory, copy kaggle.json to it, change its permission.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    ! pip install kaggle\r\n    ! mkdir ~/.kaggle\r\n    ! cp kaggle.json ~/.kaggle/\r\n    ! chmod 600 ~/.kaggle/kaggle.json\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/6.png\" alt=\"Image Description\" width = 900 height=400 /\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"4-download-data\"\u003e4. Download data\u003c/h3\u003e\n\u003cp\u003eNow you just need to download dataset. There are two types of datasets:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCompetitions\u003c/li\u003e\n\u003cli\u003eDatasets Downloading Competitions dataset:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e! kaggle competitons download «name-of-competition»\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDownloading Datasets:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e! kaggle datasets download «name-of-dataset»\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003efor example:\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/blogs/kaggle_colab/7.png\" alt=\"Image Description\" width = 800 height=100 /\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIn case dataset is downloaded as zip extension, you can simply use unzip command of linux:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e! unzip «name-of-file»\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/blogs/kaggle_colab/cover.png","permalink":"https://ronakr14.github.io/blogs/kaggle_colab/","title":"Kaggle Connectivity to Colab"},{"content":"\u003cp\u003eA binary classification machine learning model for Intrusion Detection System.\u003c/p\u003e\n\u003cp\u003eA special thanks to Satish Kamble.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"abstract\"\u003eAbstract\u003c/h2\u003e\n\u003cp\u003eThis machine learning model for binary classification identifies users on our network system and divides them into benign and malignant categories. Every network, whether it is private or public, is vulnerable to assaults that stop the regular flow of traffic on networks, as we all know. The fundamental goal of developing this architecture was to protect both public and private networks while warning the administrator of potential future harm.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"tools-and-platform\"\u003eTools and Platform\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEditors - Jupyter, Nano\u003c/li\u003e\n\u003cli\u003eLanguage - Python\u003c/li\u003e\n\u003cli\u003eLibraries - Sklearn, Pandas, Numpy, Matplotlib, Seaborn, Pickle\u003c/li\u003e\n\u003cli\u003eDeployment - AWS EC2, Docker, Python-Flask\u003c/li\u003e\n\u003cli\u003eBrowser - any\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"data-collection\"\u003eData Collection\u003c/h2\u003e\n\u003cp\u003eAn extensive dataset available on kaggle that combines all of the datasets previously described in: \u003ca href=\"https://staff.itee.uq.edu.au/marius/NIDS_datasets/#RA5\"\u003ehttps://staff.itee.uq.edu.au/marius/NIDS_datasets/#RA5\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe DoS category’s parent name has been given to the assaults formerly known as DoS attacks-Hulk, DoS attacks-SlowHTTPTest, DoS attacks-GoldenEye, and DoS attacks-Slowloris. DDoS has been used to refer to attacks formerly known as DDOS attack-LOIC-UDP, DDOS attack-HOIC, and DDoS attack-LOIC-HTTP. Brute-force attacks include those with the names FTP-BruteForce, SSH-BruteForce, Brute Force -Web, and Brute Force -XSS. Lastly, SQL Injection attacks have been added to the category of injection attacks.\u003c/p\u003e\n\u003cp\u003e11,994,893 entries make up the NF-UQ-NIDS dataset, of which 2,786,845 (23.23%) are attacks and 9,208,048 (76.77%) are benign flows.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKaggle Link - NF-UQ-NIDS-v2\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"exploratory-data-analysis\"\u003eExploratory Data Analysis\u003c/h2\u003e\n\u003cp\u003eExploratory data analysis is the crucial process of doing first investigations on data in order to identify patterns, find anomalies, test hypotheses, and double-check assumptions using summary statistics and graphical representations.\u003c/p\u003e\n\u003ctable\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003col\u003e\r\n\u003cli\u003eNumerical column description.\u003c/li\u003e\r\n\u003cli\u003eCount plot on target column.\u003c/li\u003e\r\n\u003cli\u003eSkewness and Kurtosis.\u003c/li\u003e\r\n\u003cli\u003eHistogram.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003col start=\"5\"\u003e\r\n\u003cli\u003eBox plot.\u003c/li\u003e\r\n\u003cli\u003eNull value.\u003c/li\u003e\r\n\u003cli\u003eDuplicate rows.\u003c/li\u003e\r\n\u003cli\u003eCorrelation.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\u003chr\u003e\n\u003ch2 id=\"data-pre-processing\"\u003eData Pre-processing\u003c/h2\u003e\n\u003ctable\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003col\u003e\r\n\u003cli\u003eData cleaning.\u003c/li\u003e\r\n\u003cli\u003eLabel encoding.\u003c/li\u003e\r\n\u003cli\u003eOutlier management.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003col start=\"4\"\u003e\r\n\u003cli\u003eStandardize data.\u003c/li\u003e\r\n\u003cli\u003eUnder sampling data.\u003c/li\u003e\r\n\u003cli\u003eTrain-Test-Validation split.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\u003chr\u003e\n\u003ch2 id=\"feature-selection\"\u003eFeature Selection\u003c/h2\u003e\n\u003cp\u003eEventually, the data scientist will need to determine how helpful a variable is on a larger scale. After preprocessing, the NIDS dataset’s more than 40 features were raised to 120. When we explored models without feature selection, we ran into an issue with overfitting. Therefore, we tried feature selection to avoid overfitting and provide more precise findings by removing unimportant features.\u003c/p\u003e\n\u003cp\u003eWe are selecting features on the basis of three methods:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDecision Tree\u003c/li\u003e\n\u003cli\u003eRecursive Feature Elimination\u003c/li\u003e\n\u003cli\u003ePrincipal Component Analysis\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"algorithms\"\u003eAlgorithms\u003c/h2\u003e\n\u003ctable\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003col\u003e\r\n\u003cli\u003eLogistic Regression.\u003c/li\u003e\r\n\u003cli\u003eK Nearest Neighbor.\u003c/li\u003e\r\n\u003cli\u003eNaïve Bayes - Bernoulli \u0026amp; Gaussian.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003col start=\"4\"\u003e\r\n\u003cli\u003eDesicion Tree.\u003c/li\u003e\r\n\u003cli\u003eRandom Forest.\u003c/li\u003e\r\n\u003cli\u003eGradient Boost.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\u003chr\u003e\n\u003ch2 id=\"evaluation\"\u003eEvaluation\u003c/h2\u003e\n\u003cp\u003eWe have used following evaluating terms for the models:\u003c/p\u003e\n\u003ctable\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCross Validation Score\u003c/li\u003e\r\n\u003cli\u003eAccuracy\u003c/li\u003e\r\n\u003cli\u003eConfusion Matrix\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003col start=\"4\"\u003e\r\n\u003cli\u003ePrecision, Recall, F1 Score\u003c/li\u003e\r\n\u003cli\u003eROC Curve\u003c/li\u003e\r\n\u003cli\u003ePrecision Recall Curve\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\u003chr\u003e\n\u003ch2 id=\"deployment\"\u003eDeployment\u003c/h2\u003e\n\u003cp\u003eAfter evaluating the results of the previously described methods, we settled on the random forest classifier model with decision tree as the feature selection model.\u003c/p\u003e\n\u003cp\u003eThe pickle file for this model will be used to deploy the Machine Learning model using the flask application.\u003c/p\u003e\n\u003cp\u003eThis Docker container-based Flask application will be installed on an AWS EC2 instance for easier access for other users.\u003c/p\u003e\n\u003cp\u003eThe Flask UI will be used to collect the user’s input features, process them to produce results, and display the results.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn this research, we developed a model for categorising data into dichotomous variables based on traffic flow, port numbers, and DNS.\u003c/li\u003e\n\u003cli\u003eData was acquired for model construction from Kaggle.com.\u003c/li\u003e\n\u003cli\u003eWe removed any null values, outliers, duplicate rows, and columns with a single value from the data.\u003c/li\u003e\n\u003cli\u003eOn categorical columns, we carried out label encoding.\u003c/li\u003e\n\u003cli\u003eAfter testing various feature selection techniques on the cleaned dataset, we discovered that the feature chosen using the Decision  Tree model outperformed the others in the dataset.\u003c/li\u003e\n\u003cli\u003eOn the cleansed dataset, a dozen alternative models were built. The best models were discovered to be Gradient Boosting Classifier and Random Forest Classifier.\u003c/li\u003e\n\u003cli\u003eCreated a web application using the Flask framework to make it simple to classify various user inputs using the model.\u003c/li\u003e\n\u003cli\u003eWebapp will let the user know what category it belongs to.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eMachine Learning Methods for Network Intrusion Detection, Mouhammd Alkasassbeh, Mohammad Almseidin (2018)\u003c/li\u003e\n\u003cli\u003eNetwork intrusion detection system: A machine learning approach,Mrutyunjaya Panda, Ajith Abraham, Swagatam Das, Manas Ranjan Patra (2011)\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"more-details\"\u003eMore Details\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eSource code - Network Intrusion Detection System.\u003c/li\u003e\n\u003cli\u003eDocumentation - Network Intrusion Detection System - document file.\u003c/li\u003e\n\u003c/ol\u003e\n","description":null,"image":"/images/projects/nids/0.jpeg","permalink":"https://ronakr14.github.io/projects/nids/","title":"Network Intrusion Detection System V0.1"},{"content":"\u003cp\u003eAll of my technical and non technical competencies connected to my data science portfolio are described on this page.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"technical-expertise\"\u003eTechnical Expertise\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://img.shields.io/badge/-Python-05122A?style=flat\u0026amp;logo=python\u0026amp;logoColor=#3776AB\" alt=\"Python\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-R-05122A?style=flat\u0026amp;logo=R\u0026amp;logoColor=#276DC3\" alt=\"R (Statistics)\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Java-05122A?style=flat\u0026amp;logo=Java\u0026amp;logoColor=FFA518\" alt=\"Java\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-C-05122A?style=flat\u0026amp;logo=C\u0026amp;logoColor=#A8B9CC\" alt=\"C\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-C++-05122A?style=flat\u0026amp;logo=C%2B%2B\u0026amp;logoColor=#00599C\" alt=\"C++\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-JavaScript-05122A?style=flat\u0026amp;logo=javascript\u0026amp;logoColor=#F7DF1E\" alt=\"JavaScript\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Scala-05122A?style=flat\u0026amp;logo=Scala\u0026amp;logoColor=#DC322F\" alt=\"Scala\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Markdown-05122A?style=flat\u0026amp;logo=Markdown\u0026amp;logoColor=#000000\" alt=\"Markdown\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-HTML-05122A?style=flat\u0026amp;logo=HTML5\u0026amp;logoColor=#E34F26\" alt=\"HTML\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-CSS-05122A?style=flat\u0026amp;logo=CSS3\u0026amp;logoColor=#1572B6\" alt=\"CSS\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Hadoop-05122A?style=flat\u0026amp;logo=Apache%20Hadoop\u0026amp;logoColor=#66CCFF\" alt=\"Apache Hadoop\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-MapReduce-05122A?style=flat\u0026amp;logo=MapReduce\u0026amp;logoColor=1572B6\" alt=\"MapReduce\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Pig-05122A?style=flat\u0026amp;logo=Apache%20Pig\u0026amp;logoColor=1572B6\" alt=\"Apache Pig\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Hive-05122A?style=flat\u0026amp;logo=Apache%20Hive\u0026amp;logoColor=####FDEE21\" alt=\"Apache Hive\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20HBase-05122A?style=flat\u0026amp;logo=Apache%20HBase\u0026amp;logoColor=1572B6\" alt=\"Apache HBase\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Kafka-05122A?style=flat\u0026amp;logo=Apache%20Kafka\u0026amp;logoColor=#231F20\" alt=\"Apache Kafka\"\u003e\n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Spark-05122A?style=flat\u0026amp;logo=Apache%20Spark\u0026amp;logoColor=#E25A1C\" alt=\"Apache Spark\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Airflow-05122A?style=flat\u0026amp;logo=Apache%20Airflow\u0026amp;logoColor=#017CEE\" alt=\"Apache Airflow\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Oracle-05122A?style=flat\u0026amp;logo=Oracle\u0026amp;logoColor=#F80000\" alt=\"Oracle Database\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-MongoDB-05122A?style=flat\u0026amp;logo=MongoDB\u0026amp;logoColor=#47A248\" alt=\"MongoDB\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20Cassandra-05122A?style=flat\u0026amp;logo=Apache%20Cassandra\u0026amp;logoColor=#1287B1\" alt=\"Apache Cassandra\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-MySQL-05122A?style=flat\u0026amp;logo=MySQL\u0026amp;logoColor=#4479A1\" alt=\"MySQL\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Apache%20CouchDB-05122A?style=flat\u0026amp;logo=Apache%20CouchDB\u0026amp;logoColor=#E42528\" alt=\"Apache CouchDB\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-SQLite-05122A?style=flat\u0026amp;logo=SQLite\u0026amp;logoColor=#003B57\" alt=\"SQLite\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Redis-05122A?style=flat\u0026amp;logo=Redis\u0026amp;logoColor=#DC382D\" alt=\"Redis\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Amazon%20AWS-05122A?style=flat\u0026amp;logo=Amazon%20AWS\u0026amp;logoColor=#232F3E\" alt=\"Amazon AWS\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Amazon%20EC2-05122A?style=flat\u0026amp;logo=Amazon%20EC2\u0026amp;logoColor=#DC382D\" alt=\"Amazon EC2\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Amazon%20S3-05122A?style=flat\u0026amp;logo=Amazon%20S3\u0026amp;logoColor=#569A31\" alt=\"Amazon S3\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Amazon%20VPC-05122A?style=flat\u0026amp;logo=Amazon%20VPC\u0026amp;logoColor=#DC382D\" alt=\"Amazon VPC\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Amazon%20Glacier-05122A?style=flat\u0026amp;logo=Amazon%20Glacier\u0026amp;logoColor=#DC382D\" alt=\"Amazon Glacier\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Amazon%20Lambda-05122A?style=flat\u0026amp;logo=Amazon%20Lambda\u0026amp;logoColor=#FF9900\" alt=\"Amazon Lambda\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Heroku-05122A?style=flat\u0026amp;logo=Heroku\u0026amp;logoColor=#430098\" alt=\"Heroku\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-WordPress-05122A?style=flat\u0026amp;logo=WordPress\u0026amp;logoColor=#21759B\" alt=\"WordPress\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Docker-05122A?style=flat\u0026amp;logo=Docker\u0026amp;logoColor=#2496ED\" alt=\"Docker\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Kubernetes-05122A?style=flat\u0026amp;logo=Kubernetes\u0026amp;logoColor=#326CE5\" alt=\"Kubernetes\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-scikit%20learn-05122A?style=flat\u0026amp;logo=scikit%20learn\u0026amp;logoColor=#F7931E\" alt=\"scikit-learn\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Keras-05122A?style=flat\u0026amp;logo=Keras\u0026amp;logoColor=#D00000\" alt=\"Keras\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-TensorFlow-05122A?style=flat\u0026amp;logo=TensorFlow\u0026amp;logoColor=#FF6F00\" alt=\"TensorFlow\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-PyTorch-05122A?style=flat\u0026amp;logo=PyTorch\u0026amp;logoColor=#EE4C2C\" alt=\"PyTorch\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Power%20BI-05122A?style=flat\u0026amp;logo=Power%20BI\u0026amp;logoColor=#F2C811\" alt=\"Power BI\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Tableau-05122A?style=flat\u0026amp;logo=Tableau\u0026amp;logoColor=#E97627\" alt=\"Tableau\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Jupyter-05122A?style=flat\u0026amp;logo=Jupyter\u0026amp;logoColor=#F37626\" alt=\"Jupyter\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-PyCharm-05122A?style=flat\u0026amp;logo=PyCharm\u0026amp;logoColor=#000000\" alt=\"PyCharm\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Spring-05122A?style=flat\u0026amp;logo=Spring\u0026amp;logoColor=#6DB33F\" alt=\"Spring\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Eclipse%20IDE-05122A?style=flat\u0026amp;logo=Eclipse%20IDE\u0026amp;logoColor=#2C2255\" alt=\"Eclipse IDE\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Visual%20Studio%20Code-05122A?style=flat\u0026amp;logo=Visual%20Studio%20Code\u0026amp;logoColor=#007ACC\" alt=\"Visual Studio Code\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Vim-05122A?style=flat\u0026amp;logo=Vim\u0026amp;logoColor=#019733\" alt=\"Vim\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Git-05122A?style=flat\u0026amp;logo=Git\u0026amp;logoColor=#F05032\" alt=\"Git\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-GitHub-05122A?style=flat\u0026amp;logo=GitHub\u0026amp;logoColor=#181717\" alt=\"GitHub\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-GitLab-05122A?style=flat\u0026amp;logo=GitLab\u0026amp;logoColor=#FC6D26\" alt=\"GitLab\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-curl-05122A?style=flat\u0026amp;logo=curl\u0026amp;logoColor=#073551\" alt=\"Curl\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-JSON-05122A?style=flat\u0026amp;logo=JSON\u0026amp;logoColor=#000000\" alt=\"JSON\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-JADE-05122A?style=flat\u0026amp;logo=JADE\u0026amp;logoColor=#019733\" alt=\"JADE\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-GNOME%20Terminal-05122A?style=flat\u0026amp;logo=GNOME%20Terminal\u0026amp;logoColor=#241F31\" alt=\"Terminal\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-GNU%20Bash-05122A?style=flat\u0026amp;logo=GNU%20Bash\u0026amp;logoColor=#4EAA25\" alt=\"GNU Bash\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Ubuntu-05122A?style=flat\u0026amp;logo=Ubuntu\u0026amp;logoColor=#E95420\" alt=\"Ubuntu\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Red%20Hat-05122A?style=flat\u0026amp;logo=Red%20Hat\u0026amp;logoColor=#EE0000\" alt=\"Red Hat\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Kali%20Linux-05122A?style=flat\u0026amp;logo=Kali%20Linux\u0026amp;logoColor=#557C94\" alt=\"Kali Linux\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Flask-05122A?style=flat\u0026amp;logo=Flask\u0026amp;logoColor=#000000\" alt=\"Flask\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Streamlit-05122A?style=flat\u0026amp;logo=Streamlit\u0026amp;logoColor=#FF4B4B\" alt=\"Streamlit\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-pandas-05122A?style=flat\u0026amp;logo=pandas\u0026amp;logoColor=#150458\" alt=\"Pandas\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-NumPy-05122A?style=flat\u0026amp;logo=NumPy\u0026amp;logoColor=#013243\" alt=\"NumPy\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Matplotlib-05122A?style=flat\u0026amp;logo=Matplotlib\u0026amp;logoColor=#150458\" alt=\"Matplotlib\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Seaborn-05122A?style=flat\u0026amp;logo=Seaborn\u0026amp;logoColor=#150458\" alt=\"Seaborn\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-SciPy-05122A?style=flat\u0026amp;logo=SciPy\u0026amp;logoColor=#8CAAE6\" alt=\"SciPy\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Node.js-05122A?style=flat\u0026amp;logo=Node.js\u0026amp;logoColor=#339933\" alt=\"Node.js\"\u003e \n\u003cimg src=\"https://img.shields.io/badge/-Express.js-05122A?style=flat\u0026amp;logo=Express.js\u0026amp;logoColor=#E95420\" alt=\"Express.js\"\u003e \u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"certificates\"\u003eCertificates\u003c/h2\u003e\n\u003ch4 id=\"snowflake\"\u003eSnowflake\u003c/h4\u003e\n\u003cdiv align=\"center\"\u003e\r\n    \u003cimg src=\"/images/certificates/0.png\" alt=\"Image Description\" width = 200 height=200 /\u003e\r\n    \u003cimg src=\"/images/certificates/1.png\" alt=\"Image Description\" width = 200 height=200 /\u003e\r\n\u003c/div\u003e\r\n\u003ch4 id=\"coursera\"\u003eCoursera\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003ePyCaret: Anatomy of Regression\u003c/li\u003e\n\u003cli\u003eMachine Learning Pipelines with Azure ML Studio\u003c/li\u003e\n\u003cli\u003eTesla Stock Price Prediction using Facebook Prophet\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"cdac\"\u003eCDAC\u003c/h4\u003e\n\u003cp\u003ePG Diploma in Big Data Analytics\u003c/p\u003e\n","description":"","image":"/images/skills/0.jpg","permalink":"https://ronakr14.github.io/expertise/","title":"Expertise \u0026 Certificates"}]