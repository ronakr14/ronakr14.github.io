<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ronak Rathore</title>
    <link>https://ronakr14.github.io/blogs/</link>
    <description>Recent content in Blogs on Ronak Rathore</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jan 2025 18:36:19 +0530</lastBuildDate>
    <atom:link href="https://ronakr14.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git for Non-Coders</title>
      <link>https://ronakr14.github.io/blogs/git_noncoders/</link>
      <pubDate>Sat, 11 Jan 2025 18:36:19 +0530</pubDate>
      <guid>https://ronakr14.github.io/blogs/git_noncoders/</guid>
      <description>&lt;p&gt;Using Git in Documentation, Design, and Content Management&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;When most people hear “Git,” they think of developers and coding. However, Git isn’t just for programmers; it’s a powerful tool for anyone working in teams, including writers, designers, and marketing professionals. Whether you’re managing documentation, collaborating on design assets, or keeping track of content, Git offers an efficient way to handle version control and collaboration.&lt;/p&gt;&#xA;&lt;p&gt;In this blog, we’ll explore how Git can benefit non-coders by focusing on three key areas: documentation, design, and content management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Python Metaclasses</title>
      <link>https://ronakr14.github.io/blogs/python_metaclass/</link>
      <pubDate>Sat, 11 Jan 2025 18:36:10 +0530</pubDate>
      <guid>https://ronakr14.github.io/blogs/python_metaclass/</guid>
      <description>&lt;h2 id=&#34;introduction-to-python-metaclasses&#34;&gt;Introduction to Python Metaclasses&lt;/h2&gt;&#xA;&lt;p&gt;Metaclasses are an advanced and somewhat lesser-known feature in Python, but they hold immense power. In essence, metaclasses are the classes of classes. They define how classes behave, just as classes define how instances behave. While regular classes in Python are blueprints for creating objects, metaclasses are blueprints for creating classes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-use-metaclasses&#34;&gt;Why Use Metaclasses?&lt;/h2&gt;&#xA;&lt;p&gt;You might ask: Why do we need a class for a class? Metaclasses allow for customization of class creation. By using them, you can:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kaggle Connectivity to Colab</title>
      <link>https://ronakr14.github.io/blogs/kaggle_colab/</link>
      <pubDate>Sat, 11 Jan 2025 18:35:41 +0530</pubDate>
      <guid>https://ronakr14.github.io/blogs/kaggle_colab/</guid>
      <description>&lt;p&gt;In this article, I will provide a detailed guide on how to upload a Kaggle dataset directly to Google Colab. This process simplifies data access, allowing users to seamlessly integrate Kaggle datasets into their Colab notebooks for analysis, machine learning, or data engineering tasks.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Colab&lt;/li&gt;&#xA;&lt;li&gt;Kaggle Dataset&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;steps&#34;&gt;Steps:&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-choose-dataset&#34;&gt;1. Choose Dataset&lt;/h4&gt;&#xA;&lt;p&gt;Pick the dataset you want to import into CoLab. I will be using Reviews for Hotels Worldwide (Booking.com)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
